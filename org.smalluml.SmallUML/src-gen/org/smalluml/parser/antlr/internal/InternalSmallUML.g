/*
 * generated by Xtext 2.10.0
 */
grammar InternalSmallUML;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.smalluml.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.smalluml.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.smalluml.services.SmallUMLGrammarAccess;

}

@parser::members {

 	private SmallUMLGrammarAccess grammarAccess;

    public InternalSmallUMLParser(TokenStream input, SmallUMLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Diagram";
   	}

   	@Override
   	protected SmallUMLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDiagram
entryRuleDiagram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDiagramRule()); }
	iv_ruleDiagram=ruleDiagram
	{ $current=$iv_ruleDiagram.current; }
	EOF;

// Rule Diagram
ruleDiagram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDiagramAccess().getDiagramAction_0(),
					$current);
			}
		)
		otherlv_1='Diagram'
		{
			newLeafNode(otherlv_1, grammarAccess.getDiagramAccess().getDiagramKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getDiagramAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='assoc'
			{
				newLeafNode(otherlv_3, grammarAccess.getDiagramAccess().getAssocKeyword_3_0());
			}
			otherlv_4='{'
			{
				newLeafNode(otherlv_4, grammarAccess.getDiagramAccess().getLeftCurlyBracketKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDiagramAccess().getAssocAssociationParserRuleCall_3_2_0());
					}
					lv_assoc_5_0=ruleAssociation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDiagramRule());
						}
						add(
							$current,
							"assoc",
							lv_assoc_5_0,
							"org.smalluml.SmallUML.Association");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getDiagramAccess().getCommaKeyword_3_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDiagramAccess().getAssocAssociationParserRuleCall_3_3_1_0());
						}
						lv_assoc_7_0=ruleAssociation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDiagramRule());
							}
							add(
								$current,
								"assoc",
								lv_assoc_7_0,
								"org.smalluml.SmallUML.Association");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_8='}'
			{
				newLeafNode(otherlv_8, grammarAccess.getDiagramAccess().getRightCurlyBracketKeyword_3_4());
			}
		)?
		(
			otherlv_9='heritage'
			{
				newLeafNode(otherlv_9, grammarAccess.getDiagramAccess().getHeritageKeyword_4_0());
			}
			otherlv_10='{'
			{
				newLeafNode(otherlv_10, grammarAccess.getDiagramAccess().getLeftCurlyBracketKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDiagramAccess().getHeritageHeritageParserRuleCall_4_2_0());
					}
					lv_heritage_11_0=ruleHeritage
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDiagramRule());
						}
						add(
							$current,
							"heritage",
							lv_heritage_11_0,
							"org.smalluml.SmallUML.Heritage");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_12=','
				{
					newLeafNode(otherlv_12, grammarAccess.getDiagramAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDiagramAccess().getHeritageHeritageParserRuleCall_4_3_1_0());
						}
						lv_heritage_13_0=ruleHeritage
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDiagramRule());
							}
							add(
								$current,
								"heritage",
								lv_heritage_13_0,
								"org.smalluml.SmallUML.Heritage");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_14='}'
			{
				newLeafNode(otherlv_14, grammarAccess.getDiagramAccess().getRightCurlyBracketKeyword_4_4());
			}
		)?
		(
			otherlv_15='class'
			{
				newLeafNode(otherlv_15, grammarAccess.getDiagramAccess().getClassKeyword_5_0());
			}
			otherlv_16='{'
			{
				newLeafNode(otherlv_16, grammarAccess.getDiagramAccess().getLeftCurlyBracketKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDiagramAccess().getClassClassParserRuleCall_5_2_0());
					}
					lv_class_17_0=ruleClass
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDiagramRule());
						}
						add(
							$current,
							"class",
							lv_class_17_0,
							"org.smalluml.SmallUML.Class");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_18=','
				{
					newLeafNode(otherlv_18, grammarAccess.getDiagramAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDiagramAccess().getClassClassParserRuleCall_5_3_1_0());
						}
						lv_class_19_0=ruleClass
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDiagramRule());
							}
							add(
								$current,
								"class",
								lv_class_19_0,
								"org.smalluml.SmallUML.Class");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_20='}'
			{
				newLeafNode(otherlv_20, grammarAccess.getDiagramAccess().getRightCurlyBracketKeyword_5_4());
			}
		)?
		otherlv_21='}'
		{
			newLeafNode(otherlv_21, grammarAccess.getDiagramAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getType_ImplParserRuleCall_0());
		}
		this_Type_Impl_0=ruleType_Impl
		{
			$current = $this_Type_Impl_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getFloatParserRuleCall_1());
		}
		this_Float_1=ruleFloat
		{
			$current = $this_Float_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getInt0ParserRuleCall_2());
		}
		this_Int0_2=ruleInt0
		{
			$current = $this_Int0_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getBooleanParserRuleCall_3());
		}
		this_Boolean_3=ruleBoolean
		{
			$current = $this_Boolean_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getString0ParserRuleCall_4());
		}
		this_String0_4=ruleString0
		{
			$current = $this_String0_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAssociation
entryRuleAssociation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssociationRule()); }
	iv_ruleAssociation=ruleAssociation
	{ $current=$iv_ruleAssociation.current; }
	EOF;

// Rule Association
ruleAssociation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Association'
		{
			newLeafNode(otherlv_0, grammarAccess.getAssociationAccess().getAssociationKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssociationAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssociationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.smalluml.SmallUML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getAssociationAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='used'
		{
			newLeafNode(otherlv_3, grammarAccess.getAssociationAccess().getUsedKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssociationAccess().getUsedRoleParserRuleCall_4_0());
				}
				lv_used_4_0=ruleRole
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssociationRule());
					}
					set(
						$current,
						"used",
						lv_used_4_0,
						"org.smalluml.SmallUML.Role");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='user'
		{
			newLeafNode(otherlv_5, grammarAccess.getAssociationAccess().getUserKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssociationAccess().getUserRoleParserRuleCall_6_0());
				}
				lv_user_6_0=ruleRole
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssociationRule());
					}
					set(
						$current,
						"user",
						lv_user_6_0,
						"org.smalluml.SmallUML.Role");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getAssociationAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleHeritage
entryRuleHeritage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHeritageRule()); }
	iv_ruleHeritage=ruleHeritage
	{ $current=$iv_ruleHeritage.current; }
	EOF;

// Rule Heritage
ruleHeritage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Heritage'
		{
			newLeafNode(otherlv_0, grammarAccess.getHeritageAccess().getHeritageKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHeritageAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHeritageRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.smalluml.SmallUML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getHeritageAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='mother'
		{
			newLeafNode(otherlv_3, grammarAccess.getHeritageAccess().getMotherKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHeritageAccess().getMotherRoleParserRuleCall_4_0());
				}
				lv_mother_4_0=ruleRole
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHeritageRule());
					}
					set(
						$current,
						"mother",
						lv_mother_4_0,
						"org.smalluml.SmallUML.Role");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='child'
		{
			newLeafNode(otherlv_5, grammarAccess.getHeritageAccess().getChildKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHeritageAccess().getChildRoleParserRuleCall_6_0());
				}
				lv_child_6_0=ruleRole
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHeritageRule());
					}
					set(
						$current,
						"child",
						lv_child_6_0,
						"org.smalluml.SmallUML.Role");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getHeritageAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	iv_ruleClass=ruleClass
	{ $current=$iv_ruleClass.current; }
	EOF;

// Rule Class
ruleClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getClassAccess().getClassAction_0(),
					$current);
			}
		)
		otherlv_1='Class'
		{
			newLeafNode(otherlv_1, grammarAccess.getClassAccess().getClassKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.smalluml.SmallUML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='method'
			{
				newLeafNode(otherlv_4, grammarAccess.getClassAccess().getMethodKeyword_4_0());
			}
			otherlv_5='{'
			{
				newLeafNode(otherlv_5, grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getClassAccess().getMethodMethodParserRuleCall_4_2_0());
					}
					lv_method_6_0=ruleMethod
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClassRule());
						}
						add(
							$current,
							"method",
							lv_method_6_0,
							"org.smalluml.SmallUML.Method");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getClassAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getClassAccess().getMethodMethodParserRuleCall_4_3_1_0());
						}
						lv_method_8_0=ruleMethod
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getClassRule());
							}
							add(
								$current,
								"method",
								lv_method_8_0,
								"org.smalluml.SmallUML.Method");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_9='}'
			{
				newLeafNode(otherlv_9, grammarAccess.getClassAccess().getRightCurlyBracketKeyword_4_4());
			}
		)?
		(
			otherlv_10='attribute'
			{
				newLeafNode(otherlv_10, grammarAccess.getClassAccess().getAttributeKeyword_5_0());
			}
			otherlv_11='{'
			{
				newLeafNode(otherlv_11, grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getClassAccess().getAttributeTypeParserRuleCall_5_2_0());
					}
					lv_attribute_12_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClassRule());
						}
						add(
							$current,
							"attribute",
							lv_attribute_12_0,
							"org.smalluml.SmallUML.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_13=','
				{
					newLeafNode(otherlv_13, grammarAccess.getClassAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getClassAccess().getAttributeTypeParserRuleCall_5_3_1_0());
						}
						lv_attribute_14_0=ruleType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getClassRule());
							}
							add(
								$current,
								"attribute",
								lv_attribute_14_0,
								"org.smalluml.SmallUML.Type");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_15='}'
			{
				newLeafNode(otherlv_15, grammarAccess.getClassAccess().getRightCurlyBracketKeyword_5_4());
			}
		)?
		otherlv_16='}'
		{
			newLeafNode(otherlv_16, grammarAccess.getClassAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleRole
entryRuleRole returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRoleRule()); }
	iv_ruleRole=ruleRole
	{ $current=$iv_ruleRole.current; }
	EOF;

// Rule Role
ruleRole returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Role'
		{
			newLeafNode(otherlv_0, grammarAccess.getRoleAccess().getRoleKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRoleAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRoleRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.smalluml.SmallUML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRoleAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='upper'
		{
			newLeafNode(otherlv_3, grammarAccess.getRoleAccess().getUpperKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRoleAccess().getUpperEIntParserRuleCall_4_0());
				}
				lv_upper_4_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRoleRule());
					}
					set(
						$current,
						"upper",
						lv_upper_4_0,
						"org.smalluml.SmallUML.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='lower'
		{
			newLeafNode(otherlv_5, grammarAccess.getRoleAccess().getLowerKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRoleAccess().getLowerEIntParserRuleCall_6_0());
				}
				lv_lower_6_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRoleRule());
					}
					set(
						$current,
						"lower",
						lv_lower_6_0,
						"org.smalluml.SmallUML.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='class'
		{
			newLeafNode(otherlv_7, grammarAccess.getRoleAccess().getClassKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRoleAccess().getClassClassParserRuleCall_8_0());
				}
				lv_class_8_0=ruleClass
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRoleRule());
					}
					set(
						$current,
						"class",
						lv_class_8_0,
						"org.smalluml.SmallUML.Class");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getRoleAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	iv_ruleMethod=ruleMethod
	{ $current=$iv_ruleMethod.current; }
	EOF;

// Rule Method
ruleMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMethodAccess().getMethodAction_0(),
					$current);
			}
		)
		otherlv_1='Method'
		{
			newLeafNode(otherlv_1, grammarAccess.getMethodAccess().getMethodKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.smalluml.SmallUML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getMethodAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='parameters'
			{
				newLeafNode(otherlv_4, grammarAccess.getMethodAccess().getParametersKeyword_4_0());
			}
			otherlv_5='{'
			{
				newLeafNode(otherlv_5, grammarAccess.getMethodAccess().getLeftCurlyBracketKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodAccess().getParametersTypeParserRuleCall_4_2_0());
					}
					lv_parameters_6_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_6_0,
							"org.smalluml.SmallUML.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getMethodAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMethodAccess().getParametersTypeParserRuleCall_4_3_1_0());
						}
						lv_parameters_8_0=ruleType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMethodRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_8_0,
								"org.smalluml.SmallUML.Type");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_9='}'
			{
				newLeafNode(otherlv_9, grammarAccess.getMethodAccess().getRightCurlyBracketKeyword_4_4());
			}
		)?
		(
			otherlv_10='return'
			{
				newLeafNode(otherlv_10, grammarAccess.getMethodAccess().getReturnKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodAccess().getReturnTypeParserRuleCall_5_1_0());
					}
					lv_return_11_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodRule());
						}
						set(
							$current,
							"return",
							lv_return_11_0,
							"org.smalluml.SmallUML.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_12='}'
		{
			newLeafNode(otherlv_12, grammarAccess.getMethodAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleType_Impl
entryRuleType_Impl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getType_ImplRule()); }
	iv_ruleType_Impl=ruleType_Impl
	{ $current=$iv_ruleType_Impl.current; }
	EOF;

// Rule Type_Impl
ruleType_Impl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getType_ImplAccess().getTypeAction_0(),
					$current);
			}
		)
		otherlv_1='Type'
		{
			newLeafNode(otherlv_1, grammarAccess.getType_ImplAccess().getTypeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getType_ImplAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getType_ImplRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.smalluml.SmallUML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFloat
entryRuleFloat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFloatRule()); }
	iv_ruleFloat=ruleFloat
	{ $current=$iv_ruleFloat.current; }
	EOF;

// Rule Float
ruleFloat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFloatAccess().getFloatAction_0(),
					$current);
			}
		)
		otherlv_1='Float'
		{
			newLeafNode(otherlv_1, grammarAccess.getFloatAccess().getFloatKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFloatAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFloatRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.smalluml.SmallUML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInt0
entryRuleInt0 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInt0Rule()); }
	iv_ruleInt0=ruleInt0
	{ $current=$iv_ruleInt0.current; }
	EOF;

// Rule Int0
ruleInt0 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInt0Access().getIntAction_0(),
					$current);
			}
		)
		otherlv_1='Int'
		{
			newLeafNode(otherlv_1, grammarAccess.getInt0Access().getIntKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInt0Access().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInt0Rule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.smalluml.SmallUML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBoolean
entryRuleBoolean returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanRule()); }
	iv_ruleBoolean=ruleBoolean
	{ $current=$iv_ruleBoolean.current; }
	EOF;

// Rule Boolean
ruleBoolean returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBooleanAccess().getBooleanAction_0(),
					$current);
			}
		)
		otherlv_1='Boolean'
		{
			newLeafNode(otherlv_1, grammarAccess.getBooleanAccess().getBooleanKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBooleanAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBooleanRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.smalluml.SmallUML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleString0
entryRuleString0 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getString0Rule()); }
	iv_ruleString0=ruleString0
	{ $current=$iv_ruleString0.current; }
	EOF;

// Rule String0
ruleString0 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getString0Access().getStringAction_0(),
					$current);
			}
		)
		otherlv_1='String'
		{
			newLeafNode(otherlv_1, grammarAccess.getString0Access().getStringKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getString0Access().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getString0Rule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.smalluml.SmallUML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
