/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Inject
	private MyDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEFloatAccess().getAlternatives_4_0(), "rule__EFloat__Alternatives_4_0");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getAssociationAccess().getGroup(), "rule__Association__Group__0");
					put(grammarAccess.getRoleAccess().getGroup(), "rule__Role__Group__0");
					put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group__0");
					put(grammarAccess.getClassAccess().getGroup_4(), "rule__Class__Group_4__0");
					put(grammarAccess.getClassAccess().getGroup_4_3(), "rule__Class__Group_4_3__0");
					put(grammarAccess.getClassAccess().getGroup_5(), "rule__Class__Group_5__0");
					put(grammarAccess.getClassAccess().getGroup_5_3(), "rule__Class__Group_5_3__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
					put(grammarAccess.getMethodAccess().getGroup_4(), "rule__Method__Group_4__0");
					put(grammarAccess.getMethodAccess().getGroup_4_3(), "rule__Method__Group_4_3__0");
					put(grammarAccess.getMethodAccess().getGroup_5(), "rule__Method__Group_5__0");
					put(grammarAccess.getType_ImplAccess().getGroup(), "rule__Type_Impl__Group__0");
					put(grammarAccess.getFloatAccess().getGroup(), "rule__Float__Group__0");
					put(grammarAccess.getInt0Access().getGroup(), "rule__Int0__Group__0");
					put(grammarAccess.getBooleanAccess().getGroup(), "rule__Boolean__Group__0");
					put(grammarAccess.getString0Access().getGroup(), "rule__String0__Group__0");
					put(grammarAccess.getEFloatAccess().getGroup(), "rule__EFloat__Group__0");
					put(grammarAccess.getEFloatAccess().getGroup_4(), "rule__EFloat__Group_4__0");
					put(grammarAccess.getAssociationAccess().getUsedAssignment_3(), "rule__Association__UsedAssignment_3");
					put(grammarAccess.getAssociationAccess().getUserAssignment_5(), "rule__Association__UserAssignment_5");
					put(grammarAccess.getRoleAccess().getUpperAssignment_3(), "rule__Role__UpperAssignment_3");
					put(grammarAccess.getRoleAccess().getLowerAssignment_5(), "rule__Role__LowerAssignment_5");
					put(grammarAccess.getRoleAccess().getClassAssignment_7(), "rule__Role__ClassAssignment_7");
					put(grammarAccess.getClassAccess().getNameAssignment_2(), "rule__Class__NameAssignment_2");
					put(grammarAccess.getClassAccess().getMethodAssignment_4_2(), "rule__Class__MethodAssignment_4_2");
					put(grammarAccess.getClassAccess().getMethodAssignment_4_3_1(), "rule__Class__MethodAssignment_4_3_1");
					put(grammarAccess.getClassAccess().getAttributeAssignment_5_2(), "rule__Class__AttributeAssignment_5_2");
					put(grammarAccess.getClassAccess().getAttributeAssignment_5_3_1(), "rule__Class__AttributeAssignment_5_3_1");
					put(grammarAccess.getMethodAccess().getNameAssignment_2(), "rule__Method__NameAssignment_2");
					put(grammarAccess.getMethodAccess().getParametersAssignment_4_2(), "rule__Method__ParametersAssignment_4_2");
					put(grammarAccess.getMethodAccess().getParametersAssignment_4_3_1(), "rule__Method__ParametersAssignment_4_3_1");
					put(grammarAccess.getMethodAccess().getReturnAssignment_5_1(), "rule__Method__ReturnAssignment_5_1");
					put(grammarAccess.getFloatAccess().getValueAssignment_3(), "rule__Float__ValueAssignment_3");
					put(grammarAccess.getInt0Access().getValueAssignment_3(), "rule__Int0__ValueAssignment_3");
					put(grammarAccess.getBooleanAccess().getValueAssignment_0(), "rule__Boolean__ValueAssignment_0");
					put(grammarAccess.getString0Access().getValueAssignment_3(), "rule__String0__ValueAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalMyDslParser typedParser = (InternalMyDslParser) parser;
			typedParser.entryRuleAssociation();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
