/*
 * generated by Xtext 2.10.0
 */
package org.smalluml.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.smalluml.ide.contentassist.antlr.internal.InternalSmallUMLParser;
import org.smalluml.services.SmallUMLGrammarAccess;

public class SmallUMLParser extends AbstractContentAssistParser {

	@Inject
	private SmallUMLGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalSmallUMLParser createParser() {
		InternalSmallUMLParser result = new InternalSmallUMLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getClassAccess().getAlternatives(), "rule__Class__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEFloatAccess().getAlternatives_4_0(), "rule__EFloat__Alternatives_4_0");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getDiagramAccess().getGroup(), "rule__Diagram__Group__0");
					put(grammarAccess.getDiagramAccess().getGroup_3(), "rule__Diagram__Group_3__0");
					put(grammarAccess.getDiagramAccess().getGroup_3_3(), "rule__Diagram__Group_3_3__0");
					put(grammarAccess.getDiagramAccess().getGroup_4(), "rule__Diagram__Group_4__0");
					put(grammarAccess.getDiagramAccess().getGroup_4_3(), "rule__Diagram__Group_4_3__0");
					put(grammarAccess.getDiagramAccess().getGroup_5(), "rule__Diagram__Group_5__0");
					put(grammarAccess.getDiagramAccess().getGroup_5_3(), "rule__Diagram__Group_5_3__0");
					put(grammarAccess.getAssociationAccess().getGroup(), "rule__Association__Group__0");
					put(grammarAccess.getAssociationAccess().getGroup_3(), "rule__Association__Group_3__0");
					put(grammarAccess.getAssociationAccess().getGroup_3_3(), "rule__Association__Group_3_3__0");
					put(grammarAccess.getAssociationAccess().getGroup_4(), "rule__Association__Group_4__0");
					put(grammarAccess.getAssociationAccess().getGroup_4_3(), "rule__Association__Group_4_3__0");
					put(grammarAccess.getHeritageAccess().getGroup(), "rule__Heritage__Group__0");
					put(grammarAccess.getHeritageAccess().getGroup_3(), "rule__Heritage__Group_3__0");
					put(grammarAccess.getHeritageAccess().getGroup_3_3(), "rule__Heritage__Group_3_3__0");
					put(grammarAccess.getHeritageAccess().getGroup_4(), "rule__Heritage__Group_4__0");
					put(grammarAccess.getHeritageAccess().getGroup_4_3(), "rule__Heritage__Group_4_3__0");
					put(grammarAccess.getClass_ImplAccess().getGroup(), "rule__Class_Impl__Group__0");
					put(grammarAccess.getClass_ImplAccess().getGroup_4(), "rule__Class_Impl__Group_4__0");
					put(grammarAccess.getClass_ImplAccess().getGroup_4_3(), "rule__Class_Impl__Group_4_3__0");
					put(grammarAccess.getClass_ImplAccess().getGroup_5(), "rule__Class_Impl__Group_5__0");
					put(grammarAccess.getClass_ImplAccess().getGroup_5_3(), "rule__Class_Impl__Group_5_3__0");
					put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
					put(grammarAccess.getMethodAccess().getGroup_4(), "rule__Method__Group_4__0");
					put(grammarAccess.getMethodAccess().getGroup_4_3(), "rule__Method__Group_4_3__0");
					put(grammarAccess.getMethodAccess().getGroup_5(), "rule__Method__Group_5__0");
					put(grammarAccess.getType_ImplAccess().getGroup(), "rule__Type_Impl__Group__0");
					put(grammarAccess.getRoleAccess().getGroup(), "rule__Role__Group__0");
					put(grammarAccess.getRoleAccess().getGroup_7(), "rule__Role__Group_7__0");
					put(grammarAccess.getRoleAccess().getGroup_7_3(), "rule__Role__Group_7_3__0");
					put(grammarAccess.getRoleAccess().getGroup_8(), "rule__Role__Group_8__0");
					put(grammarAccess.getRoleAccess().getGroup_8_3(), "rule__Role__Group_8_3__0");
					put(grammarAccess.getFloatAccess().getGroup(), "rule__Float__Group__0");
					put(grammarAccess.getInt0Access().getGroup(), "rule__Int0__Group__0");
					put(grammarAccess.getBooleanAccess().getGroup(), "rule__Boolean__Group__0");
					put(grammarAccess.getString0Access().getGroup(), "rule__String0__Group__0");
					put(grammarAccess.getEFloatAccess().getGroup(), "rule__EFloat__Group__0");
					put(grammarAccess.getEFloatAccess().getGroup_4(), "rule__EFloat__Group_4__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getDiagramAccess().getAssocAssignment_3_2(), "rule__Diagram__AssocAssignment_3_2");
					put(grammarAccess.getDiagramAccess().getAssocAssignment_3_3_1(), "rule__Diagram__AssocAssignment_3_3_1");
					put(grammarAccess.getDiagramAccess().getHeritageAssignment_4_2(), "rule__Diagram__HeritageAssignment_4_2");
					put(grammarAccess.getDiagramAccess().getHeritageAssignment_4_3_1(), "rule__Diagram__HeritageAssignment_4_3_1");
					put(grammarAccess.getDiagramAccess().getClassAssignment_5_2(), "rule__Diagram__ClassAssignment_5_2");
					put(grammarAccess.getDiagramAccess().getClassAssignment_5_3_1(), "rule__Diagram__ClassAssignment_5_3_1");
					put(grammarAccess.getAssociationAccess().getNameAssignment_1(), "rule__Association__NameAssignment_1");
					put(grammarAccess.getAssociationAccess().getMethodAssignment_3_2(), "rule__Association__MethodAssignment_3_2");
					put(grammarAccess.getAssociationAccess().getMethodAssignment_3_3_1(), "rule__Association__MethodAssignment_3_3_1");
					put(grammarAccess.getAssociationAccess().getAttributeAssignment_4_2(), "rule__Association__AttributeAssignment_4_2");
					put(grammarAccess.getAssociationAccess().getAttributeAssignment_4_3_1(), "rule__Association__AttributeAssignment_4_3_1");
					put(grammarAccess.getAssociationAccess().getUsedAssignment_6(), "rule__Association__UsedAssignment_6");
					put(grammarAccess.getAssociationAccess().getUserAssignment_8(), "rule__Association__UserAssignment_8");
					put(grammarAccess.getHeritageAccess().getNameAssignment_1(), "rule__Heritage__NameAssignment_1");
					put(grammarAccess.getHeritageAccess().getMethodAssignment_3_2(), "rule__Heritage__MethodAssignment_3_2");
					put(grammarAccess.getHeritageAccess().getMethodAssignment_3_3_1(), "rule__Heritage__MethodAssignment_3_3_1");
					put(grammarAccess.getHeritageAccess().getAttributeAssignment_4_2(), "rule__Heritage__AttributeAssignment_4_2");
					put(grammarAccess.getHeritageAccess().getAttributeAssignment_4_3_1(), "rule__Heritage__AttributeAssignment_4_3_1");
					put(grammarAccess.getHeritageAccess().getMotherAssignment_6(), "rule__Heritage__MotherAssignment_6");
					put(grammarAccess.getHeritageAccess().getChildAssignment_8(), "rule__Heritage__ChildAssignment_8");
					put(grammarAccess.getClass_ImplAccess().getNameAssignment_2(), "rule__Class_Impl__NameAssignment_2");
					put(grammarAccess.getClass_ImplAccess().getMethodAssignment_4_2(), "rule__Class_Impl__MethodAssignment_4_2");
					put(grammarAccess.getClass_ImplAccess().getMethodAssignment_4_3_1(), "rule__Class_Impl__MethodAssignment_4_3_1");
					put(grammarAccess.getClass_ImplAccess().getAttributeAssignment_5_2(), "rule__Class_Impl__AttributeAssignment_5_2");
					put(grammarAccess.getClass_ImplAccess().getAttributeAssignment_5_3_1(), "rule__Class_Impl__AttributeAssignment_5_3_1");
					put(grammarAccess.getMethodAccess().getNameAssignment_2(), "rule__Method__NameAssignment_2");
					put(grammarAccess.getMethodAccess().getParametersAssignment_4_2(), "rule__Method__ParametersAssignment_4_2");
					put(grammarAccess.getMethodAccess().getParametersAssignment_4_3_1(), "rule__Method__ParametersAssignment_4_3_1");
					put(grammarAccess.getMethodAccess().getReturnAssignment_5_1(), "rule__Method__ReturnAssignment_5_1");
					put(grammarAccess.getRoleAccess().getNameAssignment_1(), "rule__Role__NameAssignment_1");
					put(grammarAccess.getRoleAccess().getUpperAssignment_4(), "rule__Role__UpperAssignment_4");
					put(grammarAccess.getRoleAccess().getLowerAssignment_6(), "rule__Role__LowerAssignment_6");
					put(grammarAccess.getRoleAccess().getMethodAssignment_7_2(), "rule__Role__MethodAssignment_7_2");
					put(grammarAccess.getRoleAccess().getMethodAssignment_7_3_1(), "rule__Role__MethodAssignment_7_3_1");
					put(grammarAccess.getRoleAccess().getAttributeAssignment_8_2(), "rule__Role__AttributeAssignment_8_2");
					put(grammarAccess.getRoleAccess().getAttributeAssignment_8_3_1(), "rule__Role__AttributeAssignment_8_3_1");
					put(grammarAccess.getRoleAccess().getClassAssignment_10(), "rule__Role__ClassAssignment_10");
					put(grammarAccess.getFloatAccess().getValueAssignment_3(), "rule__Float__ValueAssignment_3");
					put(grammarAccess.getInt0Access().getValueAssignment_3(), "rule__Int0__ValueAssignment_3");
					put(grammarAccess.getBooleanAccess().getValueAssignment_0(), "rule__Boolean__ValueAssignment_0");
					put(grammarAccess.getString0Access().getValueAssignment_3(), "rule__String0__ValueAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalSmallUMLParser typedParser = (InternalSmallUMLParser) parser;
			typedParser.entryRuleDiagram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SmallUMLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SmallUMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
